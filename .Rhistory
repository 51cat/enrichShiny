z_scores <- (distances - mean(distances)) / sd(distances)
use %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*5) ~ "OUTLINE",
.default = "None"
)) %>% ggplot(aes(UMAP_1, UMAP_2, color = stat)) + geom_point()
use <- df %>% filter(cluster == "CCRF")
distances <- sqrt((use$UMAP_1 - median(use$UMAP_1))^2 + (use$UMAP_2 - median(use$UMAP_2))^2)
threshold <- 2
z_scores <- (distances - mean(distances)) / sd(distances)
use %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*5) ~ "OUTLINE",
.default = "None"
)) %>% ggplot(aes(UMAP_1, UMAP_2, color = stat)) + geom_point()
use <- df %>% filter(cluster == "K562")
distances <- sqrt((use$UMAP_1 - median(use$UMAP_1))^2 + (use$UMAP_2 - median(use$UMAP_2))^2)
threshold <- 2
z_scores <- (distances - mean(distances)) / sd(distances)
use %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*5) ~ "OUTLINE",
.default = "None"
)) %>% ggplot(aes(UMAP_1, UMAP_2, color = stat)) + geom_point()
use <- df %>% filter(cluster == "CCRF")
distances <- sqrt((use$UMAP_1 - median(use$UMAP_1))^2 + (use$UMAP_2 - median(use$UMAP_2))^2)
threshold <- 2
z_scores <- (distances - mean(distances)) / sd(distances)
use %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*5) ~ "OUTLINE",
.default = "None"
)) %>% ggplot(aes(UMAP_1, UMAP_2, color = stat)) + geom_point()
data <- cbind(use$UMAP_1, use$UMAP_2)
result <- dbscan(data, eps = 2, MinPts = 3)
outliers <- result$cluster == 0
outliers <- use[,result$cluster == 0]
result$cluster == 0
outliers <- use[result$cluster == 0,]
outliers
result <- dbscan(data)
result <- dbscan(data,eps = 1)
outliers <- use[result$cluster == 0,]
outliers
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
out[[1]] <- out.df
out[[2]] <- ggplot(out.df, aes_string(x, y, color = stat)) + geom_point()
return(out)
}
df <- vroom("D:\\Desktop\\study\\B0701-HD-SN176221-FJ_celltype.txt")
use <- df %>% filter(cluster == "CCRF")
find.outline(use, UMAP_1, UMAP_2)
find.outline(use, "UMAP_1", "UMAP_2")
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
out[[1]] <- out.df
out[[2]] <- 1#ggplot(out.df, aes_string(x, y, color = stat)) + geom_point()
return(out)
}
find.outline(use, "UMAP_1", "UMAP_2")
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
out[[1]] <- out.df
p <- ggplot(out.df, aes_string(x, y, color = stat)) + geom_point()
out[[2]] <- p
return(out)
}
find.outline(use, "UMAP_1", "UMAP_2")
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
out[[1]] <- out.df
gplot(out.df, aes_string(x, y, color = stat)) + geom_point()
#out[[2]] <- p
return(out)
}
find.outline(use, "UMAP_1", "UMAP_2")
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
out[[1]] <- out.df
ggplot(out.df, aes_string(x, y, color = stat)) + geom_point()
#out[[2]] <- p
return(out)
}
find.outline(use, "UMAP_1", "UMAP_2")
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
out[[1]] <- out.df
print(out.df)
ggplot(out.df, aes_string(x, y, color = stat)) + geom_point()
#out[[2]] <- p
return(out)
}
find.outline(use, "UMAP_1", "UMAP_2")
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
#ggplot(out.df, aes_string(x, y, color = stat)) + geom_point()
#out[[2]] <- p
return(out.df)
}
find.outline(use, "UMAP_1", "UMAP_2")
aa <- find.outline(use, "UMAP_1", "UMAP_2")
ggplot(aa, aes(UMAP_1, UMAP_2, stat)) +geom_point()
ggplot(aa, aes(UMAP_1, UMAP_2, color =stat)) +geom_point()
aa <- find.outline(use, "UMAP_1", "UMAP_2"， 8)
ggplot(aa, aes(UMAP_1, UMAP_2, color =stat)) +geom_point()
aa <- find.outline(use, "UMAP_1", "UMAP_2"， 100)
ggplot(aa, aes(UMAP_1, UMAP_2, color =stat)) +geom_point()
aa <- find.outline(use, "UMAP_1", "UMAP_2"， 100000000)
ggplot(aa, aes(UMAP_1, UMAP_2, color =stat)) +geom_point()
aa <- find.outline(use, "UMAP_1", "UMAP_2"， 100000000)
ggplot(aa, aes(UMAP_1, UMAP_2, color =stat)) +geom_point()
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
print(max(sd(abs(z_scores))))
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
#ggplot(out.df, aes_string(x, y, color = stat)) + geom_point()
#out[[2]] <- p
return(out.df)
}
aa <- find.outline(use, "UMAP_1", "UMAP_2"， 100000000)
ggplot(aa, aes(UMAP_1, UMAP_2, color =stat)) +geom_point()
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
ss <<- max(sd(abs(z_scores)))
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
#ggplot(out.df, aes_string(x, y, color = stat)) + geom_point()
#out[[2]] <- p
return(out.df)
}
aa <- find.outline(use, "UMAP_1", "UMAP_2"， 100000000)
ss
ss
#R
# 创建一个示例数据集
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 12)
y <- c(1, 2, 3, 4, 5, 6, 7, 8, 14)
# 计算欧氏距离
distances <- sqrt((x - median(x))^2 + (y - median(y))^2)
# 设置阈值，一般选择 2 或 3
threshold <- 1
outliers <- data.frame(x = x[abs(z_scores) > threshold],
y = y[abs(z_scores) > threshold])
outliers
plot(x, y)
library(tidyverse)
library(vroom)
df <- vroom("D:\\Desktop\\study\\B0701-HD-SN176221-FJ_celltype.txt")
use <- df %>% filter(cluster == "CCRF")
distances <- sqrt((use$UMAP_1 - median(use$UMAP_1))^2 + (use$UMAP_2 - median(use$UMAP_2))^2)
threshold <- 2
z_scores <- (distances - mean(distances)) / sd(distances)
use %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*5) ~ "OUTLINE",
.default = "None"
)) %>% ggplot(aes(UMAP_1, UMAP_2, color = stat)) + geom_point()
use <- df %>% filter(cluster == "CCRF")
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
ss <<- max(sd(abs(z_scores)))
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
#ggplot(out.df, aes_string(x, y, color = stat)) + geom_point()
#out[[2]] <- p
return(out.df)
}
aa <- find.outline(use, "UMAP_1", "UMAP_2"， 100000000)
aa <- find.outline(use, "UMAP_1", "UMAP_2"， 4)
aa <- find.outline(use, "UMAP_1", "UMAP_2", 4)
ggplot(aa, aes(UMAP_1, UMAP_2, color =stat)) +geom_point()
aa <- find.outline(use, "UMAP_1", "UMAP_2", 100)
ggplot(aa, aes(UMAP_1, UMAP_2, color =stat)) +geom_point()
aa <- find.outline(use, "UMAP_1", "UMAP_2", 5)
ggplot(aa, aes(UMAP_1, UMAP_2, color =stat)) +geom_point()
find.outline <- function(df, x, y, coff = 5) {
out <- list()
distances <- sqrt(
(use[[x]] - mean(df[[x]]))^2 + (use[[y]] - mean(use[[y]]))^2)
z_scores <- (distances - mean(distances)) / sd(distances)
out.df <- df %>% mutate(stat = case_when(
(abs(z_scores) > sd(abs(z_scores))*coff) ~ "OUTLINE",
.default = "Normal"
))
#ggplot(out.df, aes_string(x, y, color = stat)) + geom_point()
#out[[2]] <- p
return(out.df)
}
aa <- find.outline(use, "UMAP_1", "UMAP_2", 5)
ggplot(aa, aes(UMAP_1, UMAP_2, color =stat)) +geom_point()
library(ggplot2)
library(tidyverse)
df <- read_tsv(
"D:\\Desktop/study/E0106_1_1_Raji_Hela_1_TS_EBV_plot_data_gradient.txt"
)
df
ggplot(df, aes(UMAP_1, UMAP_2, color = EBV))
ggplot(df, aes(UMAP_1, UMAP_2, color = EBV))  + geom_point()
ggplot(df, aes(UMAP_1, UMAP_2, color = EBV))  + geom_point()+ scale_color_viridis_c()
ggplot(df, aes(UMAP_1, UMAP_2, color = EBV))  + geom_point()+ scale_color_viridis_a()
ggplot(df, aes(UMAP_1, UMAP_2, color = EBV))  + geom_point()+ scale_color_viridis_b()
ggplot(df, aes(UMAP_1, UMAP_2, color = EBV))  + geom_point()+ scale_color_viridis_d()
ggplot(df, aes(UMAP_1, UMAP_2, color = EBV))  + geom_point()+ scale_color_viridis_c()
df %>% mutate(case_when(
EBV <= 0 ~ NA
))
df %>% mutate(EBV2 = case_when(
EBV <= 0 ~ NA
))
?case_when
df %>% mutate(EBV2 = case_when(
EBV <= 0 ~ NA,
.default = EBV
))
df2 <- df %>% mutate(EBV2 = case_when(
EBV <= 0 ~ NA,
.default = EBV
))
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(direction = -1)
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(alpha = 0.8)
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(alpha = 0.8) + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(alpha = 0.8,option = "inferno") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
alpha = 0.8,option = "inferno", na.value = "gray") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
alpha = 0.8,option = "inferno", na.value = "gray") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
alpha = 0.8,option = "inferno", na.value = "gray") + theme_bw()
df <- read_tsv("D:\\Desktop/randdScript/test.txt")
df
df <- read_tsv("D:\\Desktop/randdScript/test.txt")
df
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
alpha = 0.8,option = "inferno", na.value = "gray", direction =-1) + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
alpha = 0.8, na.value = "gray", ) + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
alpha = 0.8, na.value = "gray", direction = -1) + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
alpha = 0.8, na.value = "gray") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "H") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "A") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "B") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "C") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "D") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "E") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "F") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "G") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "F") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "A") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "A") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "A",begin = 0) + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "A") + theme_bw()
ggplot(df2, aes(UMAP_1, UMAP_2, color = EBV2))  + geom_point()+ scale_color_viridis_c(
na.value = "gray",option = "A",begin = 0, end = 1) + theme_bw()
?scale_color_viridis_c
a <- c(1,2,3)
library(purrr)
map_dbl(a, function(x) x +1)
a +1
map_int(a, function(x) x +1)
map_int(a, mean)
map_dbl(iris, mean)
map_df(iris, mean)
map_df(iris, mean)
dplyr::bind_rows(
map_df(iris, mean),
map_df(iris, sd)
)
map_df(iris, sd)
map_df(mtcars, sd)
dplyr::bind_rows(
map_df(mtcars, mean),
map_df(mtcars, sd)
)
dplyr::bind_rows(
map_df(mtcars, mean),
map_df(mtcars, sd),
map_df(mtcars, median)
)
mtcars %>% map_dbl(mean)
mtcars %>% map_dbl(mean) %>% plot()
mtcars %>% map_dbl(mean)
class(mtcars$mpg)
library(map_df(mtcars, sd))
library(nycflights13)
install.packages("nycflights13")
map_chr(nycflights13::flights, class)
nycflights13::flights
class(nycflights13::flights$time_hour)
class(org.Hs.egPATH)
map(nycflights13::flights, class)
typeof("S")
map(nycflights13::flights, typeof)
map_df(nycflights13::flights, typeof)
func <- function(x) {
return(length(unique(x)))
}
map_int(iris, func)
object.size(iris)
pryr::object_size(iris)
install.packages("pryr")
pryr::object_size(iris)
pryr::object_size(iris)
pryr::object_size(mtcars)
a <- c(1:222222222222222)
a <- c(1:2222222222222)
a <- c(1:222222222)
pryr::object_size(a)
a <- c(1:2222222222222)
a <- c(1:222222222222)
a <- c(1:22222222222)
a <- c(1:2222222222)
a <- c(1:222222222)
assign("[", 10)
a <- c(1,2,3)
a[1]
assign("+", 10)
+
a[1]
`+`
?tryCatch
a <- c(1,2,x)
tryCatch(a)
a <- c(1,2,3,d)
name <- function() {
a <- c(1,2,3,d)
}
tryCatch(name)
tryCatch(name())
?tryCatch
tryCatch(1, finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"))
stop("fred")
tryCatch(name, finally = print("Hello"))
tryCatch(name(), finally = print("Hello"))
commas <- function(...) stringr::str_c(..., collapse = ", ")
commas("a","d")
commas(c("a","D"))
commas(letters)
commas <- function(...) stringr::str_c(..., collapse = "_")
commas(letters, collapse = "--")
library(tidyverse)
mtcars %>% split(.$cyl)
mtcars %>% split(.$cyl) %>% map(function(df) lm(mpg~wt, data = df))
models <- mtcars %>% split(.$cyl) %>% map(function(df) lm(mpg~wt, data = df))
models %>% map(summary)
models %>% map(summary) %>% map("r.squared")
models %>% map(summary) %>% map(~.$r.squared)
models <- mtcars %>%
split(.$cyl)
plot <- function(df) {
return(
ggplot(mpg, wt) + geom_point() + geom_smooth(method = "lm")
)
}
plot.line <- function(df) {
return(
ggplot(mpg, wt) + geom_point() + geom_smooth(method = "lm")
)
}
models <- mtcars %>%
split(.$cyl)%>%
map(plot.line)
plot.line <- function(df) {
return(
ggplot(aes(mpg, wt)) + geom_point() + geom_smooth(method = "lm")
)
}
models <- mtcars %>%
split(.$cyl)%>%
map(plot.line)
return(
ggplot(df, aes(mpg, wt)) + geom_point() + geom_smooth(method = "lm")
)
plot.line <- function(df) {
return(
ggplot(df, aes(mpg, wt)) + geom_point() + geom_smooth(method = "lm")
)
}
models <- mtcars %>%
split(.$cyl)%>%
map(plot.line)
models
cowplot::plot_grid(plotlist = models)
library(ggpubr)
library(ggpubr)
plot.line <- function(df) {
ggplot(df, aes(mpg, wt)) + geom_point() + geom_smooth(method = "lm") +
library(ggpubr)
plot.line <- function(df) {
return(
ggplot(df, aes(mpg, wt)) + geom_point() + geom_smooth(method = "lm") +
stat_cor(method = 'pearson', aes(x = mpg, y = wt))
)
plot.line <- function(df) {
return(
ggplot(df, aes(mpg, wt)) + geom_point() + geom_smooth(method = "lm") +
stat_cor(method = 'pearson', aes(x = mpg, y = wt))
)
}
models <- mtcars %>%
split(.$cyl)%>%
map(plot.line)
cowplot::plot_grid(plotlist = models)
tempdir()
walk()
walk("c")
walk("C:\\")
tempdir()
keep()
iris %>%
keep(is.factor)
iris %>%
keep(!is.factor)
iris %>% keep(!is.factor)
iris %>% keep(!is.factor)
library(tidyverse)
iris
iris %>% keep(is.factor)
iris %>% keep(!is.factor)
iris %>% keep(~is.factor)
iris %>% keep(is.factor)
iris %>% keep(is.numeric())
iris %>% keep(is.numeric)
iris %>% keep(is.numeric) %>% map_df(mean)
mtcars
mtcars %>% head
mtcars %>%filter({{"mpg"}}==1)
mtcars %>%filter({{mpg}}==1)
library(shinyEnrich)
start_KEGG_GO()
library(shinyEnrich)
library(tidyverse)
start_KEGG_GO()
